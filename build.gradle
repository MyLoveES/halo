// import org.yaml.snakeyaml.Yaml
plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id "io.freefair.lombok" version "3.6.6"
//    id 'war'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'run.halo.app'
archivesBaseName = 'halo'
version = '1.2.0'
sourceCompatibility = '1.8'
description = 'Halo, personal blog system developed in Java.'

repositories {
    maven {
        url 'https://maven.aliyun.com/nexus/content/groups/public'
    }
    mavenCentral()
    jcenter()
}

configurations {
    implementation {
        exclude module: 'spring-boot-starter-tomcat'
        exclude module: 'slf4j-log4j12'
    }

    developmentOnly

    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

bootJar {
    manifest {
        attributes('Implementation-Title': 'Halo Application',
                'Implementation-Version': version)
    }
}

ext {
    ohMyEmailVersion = '0.0.4'
    hutoolVersion = '5.0.3'
    upyunSdkVersion = '4.0.1'
    qiniuSdkVersion = '7.2.18'
    aliyunSdkVersion = '3.4.2'
    baiduSdkVersion = '0.10.36'
    qcloudSdkVersion = '5.5.7'
    swaggerVersion = '2.9.2'
    commonsLangVersion = '3.8.1'
    httpclientVersion = '4.5.7'
    dataformatYamlVersion = '2.9.2'
    jgitVersion = '5.3.0.201903130848-r'
    flexmarkVersion = '0.42.12'
    thumbnailatorVersion = '0.4.8'
    image4jVersion = '0.7zensight1'
    flywayVersion = '6.1.0'
    h2Version = '1.4.196'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'

    implementation "io.github.biezhi:oh-my-email:$ohMyEmailVersion"
    implementation "cn.hutool:hutool-core:$hutoolVersion"
    implementation "cn.hutool:hutool-crypto:$hutoolVersion"
    implementation "cn.hutool:hutool-extra:$hutoolVersion"
    implementation "com.upyun:java-sdk:$upyunSdkVersion"
    implementation "com.qiniu:qiniu-java-sdk:$qiniuSdkVersion"
    implementation "com.aliyun.oss:aliyun-sdk-oss:$aliyunSdkVersion"
    implementation "com.baidubce:bce-java-sdk:$baiduSdkVersion"
    implementation "com.qcloud:cos_api:$qcloudSdkVersion"
    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
    implementation "org.apache.httpcomponents:httpclient:$httpclientVersion"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$dataformatYamlVersion"
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"

    implementation "com.vladsch.flexmark:flexmark:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-attributes:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-autolink:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-emoji:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-escaped-character:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tasklist:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-ins:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-media-tags:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-tables:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-yaml-front-matter:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gitlab:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-html-parser:$flexmarkVersion"

    implementation "net.coobird:thumbnailator:$thumbnailatorVersion"
    implementation "net.sf.image4j:image4j:$image4jVersion"
    implementation "org.flywaydb:flyway-core:$flywayVersion"

    runtimeOnly "com.h2database:h2:$h2Version"
    runtimeOnly 'mysql:mysql-connector-java'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.3.0'
}

// 编码格式
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// 拷贝文件
task copyTask(type: Copy, dependsOn:bootJar) {
    from 'build/libs'
    into 'run'
    include '*.jar'
    rename{
        'halo.jar'
    }
    doLast {
        new File("run/run.sh").withWriter('UTF-8'){ writer ->
            writer.println('#!/bin/sh')
            writer.println('nohup java -server -Xms512M -Xmx1024M -jar halo.jar >/dev/null 2>&1 &')
    	    writer.println('echo $! > pid')
        }
        File filesDir = new File("run/files");
        if (!filesDir.exists()){
            filesDir.mkdirs()
        }
    }
}

// 拷贝文件
task copyTaskHuang(type: Copy, dependsOn:bootJar) {
    from 'build/libs'
    into 'run-Huang'
    include '*.jar'
    rename{
        'halo.jar'
    }
    doLast {
        new File("run-Huang/run.sh").withWriter('UTF-8'){ writer ->
            writer.println('#!/bin/sh')
            writer.println('nohup java -server -Xms512M -Xmx4096M -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=12405 -jar halo.jar --spring.profiles.active=huang' +
                    ' >/dev/null 2>&1 &')
            writer.println('echo $! > pid')
        }
        File filesDir = new File("run-Huang/files")
        if (!filesDir.exists()){
            filesDir.mkdirs()
        }
    }
}

task copyTaskTest(type: Copy, dependsOn:bootJar) {
    from 'build/libs'
    into 'run'
    include '*.jar'
    rename{
        'halo.jar'
    }
    doLast {
        new File("run/run.sh").withWriter('UTF-8') { writer ->
            writer.println('#!/bin/sh')
            writer.println('nohup java -server -Xms512M -Xmx4096M -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=12405 -jar halo.jar --spring.profiles.active=test' +
                    ' >/dev/null 2>&1 &')
        }
        File filesDir = new File("run/files");
        if (!filesDir.exists()){
            filesDir.mkdirs()
        }
    }
}

// 拷贝文件
task copyTaskOnline(type: Copy, dependsOn:bootJar) {
    from 'build/libs'
    into 'run'
    include '*.jar'
    rename{
        'halo.jar'
    }
    doLast {
        new File("run/run.sh").withWriter('UTF-8'){ writer ->
            writer.println('#!/bin/sh')
            writer.println('nohup java -server -Xms2048m -Xmx4096m -Xmn1024m -XX:SurvivorRatio=4 -XX:MetaspaceSize=128m ' +
                    '-XX:MaxMetaspaceSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSFullGCsBeforeCompaction=0 ' +
                    '-XX:CMSInitiatingOccupancyFraction=75 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC ' +
                    '-XX:+PrintGCApplicationStoppedTime -Xloggc:logs/gc.log -jar halo.jar --spring.profiles.active=prod' +
                    ' >/dev/null 2>&1 &')
        }
        File filesDir = new File("run/files");
        if (!filesDir.exists()){
            filesDir.mkdirs()
        }
    }
}

// 读取配置
def getProperties = {
    def properties = new Properties()
    file("src/main/resources/application.yaml").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

// 停止应用
task shutdown(type: Exec) {
    def properties = getProperties()
    commandLine 'curl', '-X', 'POST', 'http://localhost:10001/actuator/shutdown'
    ignoreExitValue true
}

// 停止应用
task shutdownHuang(type: Exec) {
    def properties = getProperties()
    commandLine 'curl', '-X', 'POST', 'http://localhost:29901/actuator/shutdown'
    ignoreExitValue true
}

// 启动应用
task start(type: Exec, dependsOn: [copyTask, shutdown]) {
    workingDir 'run'
    commandLine 'sh', 'run.sh'
}

// 启动应用
task startHuang(type: Exec, dependsOn: [copyTaskHuang, shutdownHuang]) {
    workingDir 'run-Huang'
    commandLine 'sh', 'run.sh'
}

// 启动应用
task startTest(type: Exec, dependsOn: [copyTaskTest, shutdown]) {
    workingDir 'run'
    commandLine 'sh', 'run.sh'
}

// 启动应用
task startOnline(type: Exec, dependsOn: [copyTaskOnline, shutdown]) {
    workingDir 'run'
    commandLine 'sh', 'run.sh'
}
